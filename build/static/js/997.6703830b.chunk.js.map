{"version":3,"file":"static/js/997.6703830b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Form.module.css?cb52","redux/contacts/contactsSelector.js","components/Form.js","webpack://react-homework-template/./src/components/ContactsListItem.module.css?ebc3","components/ContactListItem.js","webpack://react-homework-template/./src/components/ContactsList.module.css?0236","components/ContactsList.js","webpack://react-homework-template/./src/components/Filter.module.css?3efa","components/Filter.js","webpack://react-homework-template/./src/components/AddContacts.module.css?8427","components/AddContacts.js","views/ContactsView.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__F20lg\",\"form__label\":\"Form_form__label__Glr8G\",\"form__input\":\"Form_form__input__5O0QM\",\"form__input_name\":\"Form_form__input_name__2tjcH\",\"form__btn\":\"Form_form__btn__KKVmT\"};","export const getContacts = state => state.contacts.entities;\r\nexport const getFilter = state => state.filter;\r\nexport const getIsLoading = state => state.contacts.isLoading;\r\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../redux/contacts/contactsOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../redux/contacts/contactsSelector';\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  let nameInputId = nanoid();\n  let numberInputId = nanoid();\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const handleInputChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const formSubmitHandler = (name, number) => {\n    const normalizedName = name.toLowerCase();\n    const contactCheck = Object.values(contacts).find(contact => {\n      if (contact.name)\n        return contact.name.toLowerCase().includes(normalizedName);\n    });\n    if (contactCheck) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    formSubmitHandler(name, number);\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.form__label} htmlFor={nameInputId}>\n        Name &nbsp;&nbsp;\n        <input\n          className={css.form__input_name}\n          type=\"text\"\n          value={name}\n          onChange={handleInputChange}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={nameInputId}\n        />\n      </label>\n      <label className={css.form__label} htmlFor={numberInputId}>\n        Number &nbsp;&nbsp;\n        <input\n          className={css.form__input}\n          onChange={handleInputChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id={numberInputId}\n        />\n      </label>\n      <button className={css.form__btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default Form;\nForm.protoTypes = { onSubmit: PropTypes.func.isRequired };\n","// extracted by mini-css-extract-plugin\nexport default {\"del__btn\":\"ContactsListItem_del__btn__TQlQ4\"};","import React from 'react';\nimport css from './ContactsListItem.module.css';\nimport PropTypes from 'prop-types';\nconst ContactListItem = ({ name, number, onDelContact }) => {\n  return (\n    <>\n      <button className={css.del__btn} type=\"button\" onClick={onDelContact}>\n        Delete\n      </button>\n      {name}: &nbsp; {number}\n    </>\n  );\n};\nexport default ContactListItem;\nContactListItem.protoTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelContact: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"ContactsList_contact__list__w3gyg\",\"contact__item\":\"ContactsList_contact__item__sMqwo\"};","import React from 'react';\nimport ContactListItem from './ContactListItem';\nimport { useEffect } from 'react';\nimport css from './ContactsList.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  allContacts,\n  removeContact,\n} from '../redux/contacts/contactsOperations';\nimport { getFilter, getContacts } from '../redux/contacts/contactsSelector';\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n  useEffect(() => {\n    dispatch(allContacts());\n  }, [dispatch]);\n  const handleDelContact = contactId => {\n    dispatch(removeContact(contactId));\n  };\n  return (\n    <ul className={css.contact__list}>\n      {Object.values(contacts)\n        .filter(contact => {\n          if (contact.name)\n            return contact.name.toLowerCase().includes(filter.toLowerCase());\n        })\n        .map(({ id, name, number }) => (\n          <li className={css.contact__item} key={id}>\n            <ContactListItem\n              id={id}\n              name={name}\n              number={number}\n              onDelContact={() => handleDelContact(id)}\n            />\n          </li>\n        ))}\n    </ul>\n  );\n};\nexport default ContactsList;\nContactsList.protoTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__VePDC\",\"filter__input\":\"Filter_filter__input__K3pf3\"};","import React from 'react';\nimport css from './Filter.module.css';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filtered } from 'redux/contacts/contactsAction';\nimport { getFilter } from '../redux/contacts/contactsSelector';\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const id = nanoid();\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n  const handleFilter = event => {\n    dispatch(filtered(event.currentTarget.value));\n  };\n  return (\n    <label className={css.filter__label} htmlFor={id}>\n      Find contacts by name &nbsp;\n      <input\n        htmlFor={filterInputId}\n        className={css.filter__input}\n        onChange={handleFilter}\n        value={value}\n        type=\"text\"\n        name=\"filter\"\n        title=\"Enter name\"\n        required\n        id={id}\n      />\n    </label>\n  );\n};\nexport default Filter;\nFilter.protoType = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"add_contacts\":\"AddContacts_add_contacts__ZnbG6\",\"title\":\"AddContacts_title__k8MLw\"};","import Form from './Form';\nimport React from 'react';\nimport ContactsList from './ContactsList';\nimport Filter from './Filter';\nimport css from './AddContacts.module.css';\nconst AddContacts = () => {\n  return (\n    <div className={css.add_contacts}>\n      <h1 className={css.title}>Phonebook</h1>\n      <Form />\n      <h2 className={css.title}>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n};\nexport default AddContacts;\n","import AddContacts from '../components/AddContacts';\r\nimport React from 'react';\r\nconst ContactsView = () => {\r\n  return <AddContacts />;\r\n};\r\nexport default ContactsView;\r\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getContacts","state","contacts","entities","getFilter","filter","Form","useState","name","setName","number","setNumber","nameInputId","nanoid","numberInputId","dispatch","useDispatch","useSelector","handleInputChange","target","value","reset","className","css","onSubmit","event","preventDefault","normalizedName","toLowerCase","Object","values","find","contact","includes","alert","addContact","formSubmitHandler","htmlFor","type","onChange","pattern","title","required","id","protoTypes","PropTypes","ContactListItem","onDelContact","onClick","ContactsList","useEffect","allContacts","map","contactId","removeContact","Filter","filterInputId","filtered","currentTarget","protoType","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}