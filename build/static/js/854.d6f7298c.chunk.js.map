{"version":3,"file":"static/js/854.d6f7298c.chunk.js","mappings":"4PAKaA,EAAe,WAC1B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACIC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAChBG,GAAWC,EAAAA,EAAAA,MACXC,EAAoB,SAAC,GAAiC,IAAD,IAA9BC,OAAUb,EAAoB,EAApBA,KAAMc,EAAc,EAAdA,MAC3C,OAAQd,GACN,IAAK,OACHC,EAAQa,GACR,MACF,IAAK,QACHX,EAASW,GACT,MACF,IAAK,WACHT,EAAYS,KAYZC,EAAQ,WACZd,EAAQ,IACRE,EAAS,IACTE,EAAY,KAGd,OACE,kBAAMW,UAAWC,EAAAA,EAAAA,aAAkBC,SAbhB,SAAAC,GACnBA,EAAMC,iBACNV,GAASW,EAAAA,EAAAA,IAAS,CAAErB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAEjCW,KASA,WACE,mBAAOC,UAAWC,EAAAA,EAAAA,oBAAyBK,QAAShB,EAApD,2BAEE,kBACEU,UAAWC,EAAAA,EAAAA,yBACXM,KAAK,OACLT,MAAOd,EACPwB,SAAUZ,EACVZ,KAAK,OACLyB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,GAAItB,QAGR,mBAAOU,UAAWC,EAAAA,EAAAA,oBAAyBK,QAASd,EAApD,4BAEE,kBACEQ,UAAWC,EAAAA,EAAAA,0BACXO,SAAUZ,EACVE,MAAOZ,EACPqB,KAAK,OACLvB,KAAK,QACLyB,QAAQ,gDACRC,MAAM,6BACNC,UAAQ,EACRC,GAAIpB,QAGR,mBAAOQ,UAAWC,EAAAA,EAAAA,oBAAyBK,QAASb,EAApD,+BAEE,kBACEO,UAAWC,EAAAA,EAAAA,6BACXO,SAAUZ,EACVE,MAAOV,EACPmB,KAAK,OACLvB,KAAK,WACLyB,QAAQ,uEACRC,MAAM,6GACNC,UAAQ,EACRC,GAAInB,QAGR,mBAAQO,UAAWC,EAAAA,EAAAA,kBAAuBM,KAAK,SAA/C,6B,UC1EN,EARqB,WACnB,OACE,iCACE,eAAIP,UAAWC,EAAAA,EAAAA,YAAf,2BADF,KAEE,SAACnB,EAAD,S,mBCLN,KAAgB,aAAe,0CAA0C,oBAAsB,iDAAiD,yBAA2B,sDAAsD,0BAA4B,uDAAuD,6BAA+B,0DAA0D,kBAAoB,iD,mBCAja,KAAgB,YAAc,0BAA0B,sBAAwB,oCAAoC,qBAAuB,qC,sDCA3I,IAkBIS,EAAS,WAGX,IAH0B,IAAdsB,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAON","sources":["components/RegisterForm.js","views/RegisterView.js","webpack://react-homework-template/./src/components/Register&&LogInForm.module.css?1aec","webpack://react-homework-template/./src/views/View.module.css?0f9b","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport css from './Register&&LogInForm.module.css';\r\nimport { register } from 'redux/auth/authOperations';\r\nimport { useDispatch } from 'react-redux';\r\nexport const RegisterForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  let nameInputId = nanoid();\r\n  let emailInputId = nanoid();\r\n  let passwordInputId = nanoid();\r\n  const dispatch = useDispatch();\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'email':\r\n        setEmail(value);\r\n        break;\r\n      case 'password':\r\n        setPassword(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch(register({ name, email, password }));\r\n\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <form className={css.registerForm} onSubmit={handleSubmit}>\r\n      <label className={css.registerForm__label} htmlFor={nameInputId}>\r\n        Name &nbsp;&nbsp;\r\n        <input\r\n          className={css.registerForm__input_name}\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n      <label className={css.registerForm__label} htmlFor={emailInputId}>\r\n        Email &nbsp;&nbsp;\r\n        <input\r\n          className={css.registerForm__input_email}\r\n          onChange={handleInputChange}\r\n          value={email}\r\n          type=\"text\"\r\n          name=\"email\"\r\n          pattern=\"^[-\\w.]+@([A-z0-9][-A-z0-9]+\\.)+[A-z]{2,4}$\"\r\n          title=\"Input please correct email\"\r\n          required\r\n          id={emailInputId}\r\n        />\r\n      </label>\r\n      <label className={css.registerForm__label} htmlFor={passwordInputId}>\r\n        Password &nbsp;&nbsp;\r\n        <input\r\n          className={css.registerForm__input_password}\r\n          onChange={handleInputChange}\r\n          value={password}\r\n          type=\"text\"\r\n          name=\"password\"\r\n          pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n          title=\"Password must be uppercase and lowercase latin letters, numbers, special characters. Minimum 8 characters.\"\r\n          required\r\n          id={passwordInputId}\r\n        />\r\n      </label>\r\n      <button className={css.registerForm__btn} type=\"submit\">\r\n        Create user\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import { RegisterForm } from '../components/RegisterForm';\r\nimport css from './View.module.css';\r\nconst RegisterView = () => {\r\n  return (\r\n    <>\r\n      <h2 className={css.tittle_view}>Registrations</h2>;\r\n      <RegisterForm />\r\n    </>\r\n  );\r\n};\r\nexport default RegisterView;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registerForm\":\"Register&&LogInForm_registerForm__AJ6yT\",\"registerForm__label\":\"Register&&LogInForm_registerForm__label__xvW+y\",\"registerForm__input_name\":\"Register&&LogInForm_registerForm__input_name__gdh5p\",\"registerForm__input_email\":\"Register&&LogInForm_registerForm__input_email__I6gVd\",\"registerForm__input_password\":\"Register&&LogInForm_registerForm__input_password__k6FtU\",\"registerForm__btn\":\"Register&&LogInForm_registerForm__btn__HPAL7\"};","// extracted by mini-css-extract-plugin\nexport default {\"tittle_view\":\"View_tittle_view__Cl7U+\",\"tittle_view__homepage\":\"View_tittle_view__homepage__cZ2-G\",\"description_homepage\":\"View_description_homepage__Z2MZI\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","nameInputId","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","handleInputChange","target","value","reset","className","css","onSubmit","event","preventDefault","register","htmlFor","type","onChange","pattern","title","required","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}