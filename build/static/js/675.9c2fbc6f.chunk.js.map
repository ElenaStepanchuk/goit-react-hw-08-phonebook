{"version":3,"file":"static/js/675.9c2fbc6f.chunk.js","mappings":"4PAKaA,EAAY,WACvB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACIC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAChBE,GAAWC,EAAAA,EAAAA,MACXC,EAAoB,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAC3C,OAAQD,GACN,IAAK,QACHV,EAASW,GACT,MACF,IAAK,WACHT,EAAYS,KAWZC,EAAQ,WACZZ,EAAS,IACTE,EAAY,KAEd,OACE,kBAAMW,UAAWC,EAAAA,EAAAA,aAAkBC,SAVhB,SAAAC,GACnBA,EAAMC,iBACNX,GAASY,EAAAA,EAAAA,IAAM,CAAEnB,MAAAA,EAAOE,SAAAA,KACxBW,KAOA,WACE,mBAAOC,UAAWC,EAAAA,EAAAA,oBAAyBK,QAAShB,EAApD,4BAEE,kBACEU,UAAWC,EAAAA,EAAAA,0BACXM,SAAUZ,EACVG,MAAOZ,EACPsB,KAAK,OACLX,KAAK,QACLY,QAAQ,gDACRC,MAAM,6BACNC,UAAQ,EACRC,GAAItB,QAGR,mBAAOU,UAAWC,EAAAA,EAAAA,oBAAyBK,QAASd,EAApD,+BAEE,kBACEQ,UAAWC,EAAAA,EAAAA,6BACXM,SAAUZ,EACVG,MAAOV,EACPoB,KAAK,OACLX,KAAK,WACLc,UAAQ,EACRC,GAAIpB,QAGR,mBAAQQ,UAAWC,EAAAA,EAAAA,kBAAuBO,KAAK,SAA/C,uB,UClDN,EARkB,WAChB,OACE,iCACE,eAAIR,UAAWC,EAAAA,EAAAA,YAAf,qBACA,SAACjB,EAAD,S,mBCLN,KAAgB,aAAe,0CAA0C,oBAAsB,iDAAiD,yBAA2B,sDAAsD,0BAA4B,uDAAuD,6BAA+B,0DAA0D,kBAAoB,iD,mBCAja,KAAgB,YAAc,0BAA0B,sBAAwB,oCAAoC,qBAAuB,qC,sDCA3I,IAkBIO,EAAS,WAGX,IAH0B,IAAdsB,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAON","sources":["components/LogInForm.js","views/LoginView.js","webpack://react-homework-template/./src/components/Register&&LogInForm.module.css?1aec","webpack://react-homework-template/./src/views/View.module.css?0f9b","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport css from './Register&&LogInForm.module.css';\r\nimport { logIn } from '../redux/auth/authOperations';\r\nimport { useDispatch } from 'react-redux';\r\nexport const LogInForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  let emailInputId = nanoid();\r\n  let passwordInputId = nanoid();\r\n  const dispatch = useDispatch();\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        setEmail(value);\r\n        break;\r\n      case 'password':\r\n        setPassword(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch(logIn({ email, password }));\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n  return (\r\n    <form className={css.registerForm} onSubmit={handleSubmit}>\r\n      <label className={css.registerForm__label} htmlFor={emailInputId}>\r\n        Email &nbsp;&nbsp;\r\n        <input\r\n          className={css.registerForm__input_email}\r\n          onChange={handleInputChange}\r\n          value={email}\r\n          type=\"text\"\r\n          name=\"email\"\r\n          pattern=\"^[-\\w.]+@([A-z0-9][-A-z0-9]+\\.)+[A-z]{2,4}$\"\r\n          title=\"Input please correct email\"\r\n          required\r\n          id={emailInputId}\r\n        />\r\n      </label>\r\n      <label className={css.registerForm__label} htmlFor={passwordInputId}>\r\n        Password &nbsp;&nbsp;\r\n        <input\r\n          className={css.registerForm__input_password}\r\n          onChange={handleInputChange}\r\n          value={password}\r\n          type=\"text\"\r\n          name=\"password\"\r\n          required\r\n          id={passwordInputId}\r\n        />\r\n      </label>\r\n      <button className={css.registerForm__btn} type=\"submit\">\r\n        Enter\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import { LogInForm } from '../components/LogInForm';\r\nimport css from './View.module.css';\r\nconst LoginView = () => {\r\n  return (\r\n    <>\r\n      <h2 className={css.tittle_view}>Log In</h2>\r\n      <LogInForm />\r\n    </>\r\n  );\r\n};\r\nexport default LoginView;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registerForm\":\"Register&&LogInForm_registerForm__x2QdX\",\"registerForm__label\":\"Register&&LogInForm_registerForm__label__tmBzs\",\"registerForm__input_name\":\"Register&&LogInForm_registerForm__input_name__e3dfd\",\"registerForm__input_email\":\"Register&&LogInForm_registerForm__input_email__ZSCrF\",\"registerForm__input_password\":\"Register&&LogInForm_registerForm__input_password__7urKg\",\"registerForm__btn\":\"Register&&LogInForm_registerForm__btn__ytlyY\"};","// extracted by mini-css-extract-plugin\nexport default {\"tittle_view\":\"View_tittle_view__oR5Tf\",\"tittle_view__homepage\":\"View_tittle_view__homepage__YF+vd\",\"description_homepage\":\"View_description_homepage__202Z7\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["LogInForm","useState","email","setEmail","password","setPassword","emailInputId","nanoid","passwordInputId","dispatch","useDispatch","handleInputChange","target","name","value","reset","className","css","onSubmit","event","preventDefault","logIn","htmlFor","onChange","type","pattern","title","required","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}